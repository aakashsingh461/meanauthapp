{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/dashboard/dashboard.component.css","webpack:///./src/app/components/dashboard/dashboard.component.html","webpack:///./src/app/components/dashboard/dashboard.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/profile/profile.component.css","webpack:///./src/app/components/profile/profile.component.html","webpack:///./src/app/components/profile/profile.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/guards/auth.guard.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/validate.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\n<div class=\\\"container\\\">\\n  <router-outlet></router-outlet>\\n</div>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app works!';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule }  from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Routes} from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ProfileComponent } from './components/profile/profile.component';\n\nimport { ValidateService} from './services/validate.service';\nimport { AuthService } from './services/auth.service';\n\nimport { AuthGuard } from './guards/auth.guard';\n\nconst appRoutes: Routes =  [\n  {path:'', component: HomeComponent},\n  {path:'register', component: RegisterComponent},\n  {path:'login', component: LoginComponent},\n  {path:'dashboard', component: DashboardComponent , canActivate:[AuthGuard]},\n  {path:'profile', component: ProfileComponent , canActivate:[AuthGuard]}\n]\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    DashboardComponent,\n    ProfileComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes)\n  ],\n  providers: [ValidateService,AuthService,AuthGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<br><h2>Dashboard</h2>\\n<br>\\n<p>Welcome To your Dashboard</p>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron text-center\\\">\\n        <h1>MEAN Authentication App</h1>\\n        <p class=\\\"lead\\\">Welcome to our custom MEAN authentication application built from scratch</p>\\n        <div>\\n          <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/register']\\\">Register</a> <a class=\\\"btn btn-default\\\" [routerLink]=\\\"['/login']\\\">Login</a>\\n        </div>\\n      </div>\\n      \\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-4\\\">\\n          <h3>Express Backend</h3>\\n          <p>A rock solid Node.js/Express server using Mongoose to organize models and query the database</p>\\n        </div>\\n        <div class=\\\"col-md-4\\\">\\n          <h3>Angular-CLI</h3>\\n          <p>Angular-CLI to generate components, services and more. Local dev server and easy compilation</p>\\n        </div>\\n        <div class=\\\"col-md-4\\\">\\n          <h3>JWT Tokens</h3>\\n          <p>Full featured authentication using JSON web tokens. Login and store user data</p>\\n        </div>\\n      </div>\\n      \"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<br><div class=\\\"row\\\" >\\n  <div class=\\\"col s12\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-content white-text\\\">\\n        <div class=\\\"row\\\" >\\n          <div class=\\\"col s5\\\" >\\n              <h3>Login</h3>\\n        <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"OnLogin(loginForm.value)\\\"> \\n                    \\n                      <div class=\\\"form-group col-md-6\\\">\\n                          <label>Username</label>\\n                          <input class=\\\"form-control\\\" autocomplete=\\\"off\\\" required type=\\\"text\\\" name=\\\"username\\\" formControlName=\\\"username\\\" >\\n                      </div>\\n\\n                      <div class=\\\"form-group col-md-6\\\">\\n                        <label>Password</label>\\n                        <input class=\\\"form-control\\\" autocomplete=\\\"off\\\" required type=\\\"text\\\" name=\\\"password\\\" formControlName=\\\"password\\\" >\\n                    </div>\\n                \\n                    <div class=\\\"row\\\">           \\n                        <div class=\\\"form-group col-md-12\\\">            \\n                            <input class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"!loginForm.valid\\\" value=\\\"Submit\\\">\\n                            <input style=\\\"margin-left:10px;\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"OnDiscard()\\\" value=\\\"Reset\\\" > \\n                         </div>      \\n                    </div> \\n                    \\n              </form> \\n              </div>        \\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n                   \"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm;  \n  loginCredData : any;  \n  username: String;  \n  password: String;\n  finalJsonData;\n \n  constructor(private authServe : AuthService, private route : Router) { }\n\n  ngOnInit() {     \n    this.setFormControl();   \n  }\n\n  setFormControl() {\n    this.loginForm = new FormGroup(\n      {\n        username: new FormControl(\"\"),\n        password : new FormControl(\"\")\n      }\n    )\n  }\n\n  OnLogin(frmData){\n    //console.log(JSON.stringify(frmData));\n      let req = this.authServe.authenticateUser(JSON.stringify(frmData));        \n          req.subscribe(resData => { \n            //console.log(JSON.stringify(resData));\n            //console.log(JSON.parse(JSON.stringify(resData)));\n            this.finalJsonData = JSON.parse(JSON.stringify(resData));            \n            if(this.finalJsonData.success){\n              this.authServe.storeUserData(this.finalJsonData.token, this.finalJsonData.user);\n              console.log(\"Login Successfully !!! \");\n              this.route.navigate(['/profile']);\n            }else{\n              this.route.navigate(['/login']);\n              console.log(\"Invalid Credentials !!! Try again with correct username and password !!! \");\n            }                      \n          });\n    this.OnDiscard();\n  }\n\n  OnDiscard(){    \n    this.setFormControl();    \n  }\n\n}\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark\\\">\\n  <a class=\\\"navbar-brand\\\" href=\\\"#\\\">akSolutions</a>\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\n    <ul class=\\\"navbar-nav mr-auto\\\" >  \\n      <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/']\\\">Home <span class=\\\"sr-only\\\">(current)</span></a>\\n      </li>  \\n      <li *ngIf=\\\"authserve.loggedIn()\\\" class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/dashboard']\\\">Dashboard</a>\\n      </li>  \\n      <li *ngIf=\\\"authserve.loggedIn()\\\" class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/profile']\\\">Profile</a>\\n      </li>      \\n      <li *ngIf=\\\"!authserve.loggedIn()\\\" class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/login']\\\">Login</a>\\n      </li>\\n      <li *ngIf=\\\"!authserve.loggedIn()\\\" class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/register']\\\">Register</a>\\n      </li>\\n      <li *ngIf=\\\"authserve.loggedIn()\\\" class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"#\\\" (click)=\\\"onLogout()\\\">Logout</a>\\n      </li>\\n    </ul>\\n  </div>\\n</nav>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(private authserve : AuthService, private route : Router) { }\n\n  ngOnInit() {    \n  }\n\n  onLogout(){\n    this.authserve.logout();\n    console.log(\"logout Successfully !!!\");\n    this.route.navigate(['/login']);\n    return false;\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<br><div *ngIf=\\\"user\\\">\\n  <h2 class=\\\"page-header\\\">Welcome , {{ user.name }}</h2>\\n  <ul class=\\\"list-group\\\">\\n    <li class=\\\"list-group-item\\\"> Username :  {{ user.username}}</li>\\n    <li class=\\\"list-group-item\\\"> Email :  {{ user.email}}</li>\\n  </ul>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user : Object;\n  constructor(private authServe : AuthService, private route : Router) { }\n\n  ngOnInit() {\n    \n    let req = this.authServe.getProfile();        \n    req.subscribe(resData => {    \n        console.log(JSON.parse(JSON.stringify(resData)).user);\n        this.user = JSON.parse(JSON.stringify(resData)).user;\n    },\n    err => {\n      console.log(err);\n      return false;\n    });\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<br><div class=\\\"row\\\">\\n  <div class=\\\"col s12\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-content white-text\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col s5\\\">\\n              <h3>Sign Up</h3>\\n        <form [formGroup]=\\\"signUpForm\\\" (ngSubmit)=\\\"OnsignUp(signUpForm.value)\\\">  \\n                                                       \\n                    <div class=\\\"form-group col-md-6\\\">\\n                      <label>Name</label>\\n                      <input class=\\\"form-control\\\" autocomplete=\\\"off\\\" required type=\\\"text\\\" name=\\\"name\\\" formControlName=\\\"name\\\">\\n                    </div> \\n\\n                    <div class=\\\"form-group col-md-6\\\">\\n                        <label>Email</label>\\n                        <input class=\\\"form-control\\\" autocomplete=\\\"off\\\" required type=\\\"email\\\" name=\\\"email\\\" formControlName=\\\"email\\\"> \\n                    </div>                    \\n                  \\n                      <div class=\\\"form-group col-md-6\\\">\\n                          <label>Username</label>\\n                          <input class=\\\"form-control\\\" autocomplete=\\\"off\\\" type=\\\"text\\\" name=\\\"username\\\" formControlName=\\\"username\\\" >\\n                      </div>\\n\\n                      <div class=\\\"form-group col-md-6\\\">\\n                        <label>Password</label>\\n                        <input class=\\\"form-control\\\" autocomplete=\\\"off\\\" type=\\\"text\\\" name=\\\"password\\\" formControlName=\\\"password\\\" >\\n                    </div>\\n                \\n                    <div class=\\\"row\\\">           \\n                        <div class=\\\"form-group col-md-12\\\">            \\n                            <input class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"!signUpForm.valid\\\" value=\\\"Save Details\\\">\\n                            <input style=\\\"margin-left:10px;\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"OnDiscard()\\\" value=\\\"Reset\\\" > \\n                         </div>      \\n                    </div> \\n                    \\n              </form> \\n              </div>        \\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n                   \"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\n\nexport class RegisterComponent implements OnInit {\n\n  signUpForm;\n  name: String;\n  username: String;\n  email: String;\n  password: String;\n\n  constructor(private authServe : AuthService, private route : Router) { }\n\n  ngOnInit() {     \n    this.setFormControl();   \n  }\n\n  setFormControl() {\n    this.signUpForm = new FormGroup(\n      {\n        name: new FormControl(\"\"),\n        email: new FormControl(\"\"),\n        username: new FormControl(\"\"),\n        password : new FormControl(\"\")\n      }\n    )\n  }\n\n  OnsignUp(frmData){\n    //console.log(frmData);\n    let req = this.authServe.addUser(frmData);\n      req.subscribe(Response=> {\n          console.log(\"User Registration Successfully !!!\");   \n          this.route.navigate(['/login']);\n          this.OnDiscard();\n      })\n  }\n\n  OnDiscard(){    \n    this.setFormControl();    \n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Router , CanActivate } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n    constructor(private authserve : AuthService, private route : Router) { }\n\n    canActivate(){\n        if(this.authserve.loggedIn()){\n            return true;\n        }else{\n            this.route.navigate(['/']);\n            return false;\n        }\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from \"rxjs/internal/Observable\";\nimport { tokenNotExpired } from 'angular2-jwt';  // must install angular2-jwt and rxjs-compat for upgraded version\n\n\n@Injectable()\nexport class AuthService {\n  \n  authToken : any;\n  user : any;\n\n  constructor(private http : HttpClient) { }\n\n  //Add User\n  addUser(newUser){\n    //console.log(newUser);\n    let headers = new HttpHeaders({'Content-Type':'application/json'});\n    return this.http.post('http://localhost:3000/users/register',newUser,{headers});\n  }\n\n  // authenticate User\n  authenticateUser(cred){\n    //console.log(cred);\n    let headers = new HttpHeaders({'Content-Type':'application/json'});\n    return this.http.post('http://localhost:3000/users/authenticate',cred,{headers});      \n  }\n\n  // get Profile\n  getProfile(){\n    this.loadToken();\n    let headers = new HttpHeaders(\n    {'Content-Type':'application/json',\n    'Authorization':this.authToken});\n    return this.http.get('http://localhost:3000/users/profile',{headers});\n  }\n\n  // load Token\n  loadToken(){\n    const token = localStorage.getItem('id_token');\n    this.authToken = token;\n  }\n\n  // loggedIn\n\n  loggedIn(){    \n    return tokenNotExpired('id_token');\n  }\n\n  // storeUserData - work like maintaing session on login\n  storeUserData(token,user){\n    localStorage.setItem('id_token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    this.authToken = token;\n    this.user = user;\n  }\n\n  // logout\n\n  logout(){\n    this.authToken = null;\n    this.user = null;\n    localStorage.clear();\n  }\n\n}\n\n// error of map function is not resolved but we can use these libraries\n//import { map } from 'rxjs/operators';\n// import 'rxjs/add/observable/of';\n//import 'rxjs/add/operator/map';\n// import 'rxjs/add/operator/switchMap';\n// import 'rxjs/add/operator/toPromise';\n// import 'rxjs/Rx';","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ValidateService {\n\n  constructor() { }\n  \n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}